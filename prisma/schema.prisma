generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  address        Address[]
  savedYardSales SavedYardSales[]
  sessions       Session[]
  yardSale       YardSale[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YardSale {
  id             String           @id @default(cuid())
  userId         String
  addressId      String
  title          String
  description    String
  date           String
  hours          String
  imageId        String
  createdAt      DateTime         @default(now())
  savedYardSales SavedYardSales[]
  address        Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)
  image          Image            @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  dates          YardSaleDate[]
  yardSaleTags   YardSaleTags[]
}

model Address {
  id        String     @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zip       String
  country   String
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  yardSale  YardSale[]
}

model Image {
  id         String     @id @default(cuid())
  url        String
  createdAt  DateTime   @default(now())
  yardsaleId YardSale[]
}

model Tag {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  yardSaleTags YardSaleTags[]
}

model YardSaleTags {
  yardSaleId String
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id])
  yardSale   YardSale @relation(fields: [yardSaleId], references: [id])

  @@id([yardSaleId, tagId])
}

model SavedYardSales {
  yardSaleId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  yardSale   YardSale @relation(fields: [yardSaleId], references: [id])

  @@id([yardSaleId, userId])
}

model YardSaleDate {
  id         String   @id @default(cuid())
  date       String
  createdAt  DateTime @default(now())
  yardSaleId String
  yardsale   YardSale @relation(fields: [yardSaleId], references: [id])
}

enum Role {
  VIEWER
  ADMIN
  SELLER
}
